/*
 * IEdison API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * IEdisonUtilizationSearchRequest
 */
public class IEdisonUtilizationSearchRequest implements OAS.MappedProperties {
    /**
     * Get r_limit
     * @return r_limit
     */
    public Integer r_limit { get; set; }

    /**
     * Get offset
     * @return offset
     */
    public Integer offset { get; set; }

    /**
     * Get inventionReportNumber
     * @return inventionReportNumber
     */
    public String inventionReportNumber { get; set; }

    /**
     * Get inventionDocketNumber
     * @return inventionDocketNumber
     */
    public String inventionDocketNumber { get; set; }

    /**
     * Get grantContractNumber
     * @return grantContractNumber
     */
    public String grantContractNumber { get; set; }

    /**
     * Get latestStageDev
     * @return latestStageDev
     */
    public String latestStageDev { get; set; }

    /**
     * Get primaryAgency
     * @return primaryAgency
     */
    public String primaryAgency { get; set; }

    /**
     * Get granteeOrganizationName
     * @return granteeOrganizationName
     */
    public String granteeOrganizationName { get; set; }

    /**
     * Get titleElectionStatus
     * @return titleElectionStatus
     */
    public List<String> titleElectionStatus { get; set; }

    /**
     * Get inventionTitle
     * @return inventionTitle
     */
    public String inventionTitle { get; set; }

    /**
     * Get inventionReportDateFrom
     * @return inventionReportDateFrom
     */
    public String inventionReportDateFrom { get; set; }

    /**
     * Get inventionReportDateTo
     * @return inventionReportDateTo
     */
    public String inventionReportDateTo { get; set; }

    /**
     * Get fiscalYear
     * @return fiscalYear
     */
    public Integer fiscalYear { get; set; }

    /**
     * Get commercialProductName
     * @return commercialProductName
     */
    public String commercialProductName { get; set; }

    /**
     * Get fdaApprovalNumber
     * @return fdaApprovalNumber
     */
    public String fdaApprovalNumber { get; set; }

    /**
     * Get fdaReportType
     * @return fdaReportType
     */
    public String fdaReportType { get; set; }

    /**
     * Get lastUpdatedFrom
     * @return lastUpdatedFrom
     */
    public String lastUpdatedFrom { get; set; }

    /**
     * Get lastUpdatedTo
     * @return lastUpdatedTo
     */
    public String lastUpdatedTo { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'limit' => 'r_limit'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public IEdisonUtilizationSearchRequest() {
        titleElectionStatus = new List<String>();
    }

    public static IEdisonUtilizationSearchRequest getExample() {
        IEdisonUtilizationSearchRequest utilizationSearchRequest = new IEdisonUtilizationSearchRequest();
          utilizationSearchRequest.r_limit = 0;
          utilizationSearchRequest.offset = 0;
          utilizationSearchRequest.inventionReportNumber = '';
          utilizationSearchRequest.inventionDocketNumber = '';
          utilizationSearchRequest.grantContractNumber = '';
          utilizationSearchRequest.latestStageDev = '';
          utilizationSearchRequest.primaryAgency = '';
          utilizationSearchRequest.granteeOrganizationName = '';
          utilizationSearchRequest.titleElectionStatus = new List<String>{''};
          utilizationSearchRequest.inventionTitle = '';
          utilizationSearchRequest.inventionReportDateFrom = '';
          utilizationSearchRequest.inventionReportDateTo = '';
          utilizationSearchRequest.fiscalYear = 0;
          utilizationSearchRequest.commercialProductName = '';
          utilizationSearchRequest.fdaApprovalNumber = '';
          utilizationSearchRequest.fdaReportType = '';
          utilizationSearchRequest.lastUpdatedFrom = '';
          utilizationSearchRequest.lastUpdatedTo = '';
        return utilizationSearchRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof IEdisonUtilizationSearchRequest) {           
            IEdisonUtilizationSearchRequest utilizationSearchRequest = (IEdisonUtilizationSearchRequest) obj;
            return this.r_limit == utilizationSearchRequest.r_limit
                && this.offset == utilizationSearchRequest.offset
                && this.inventionReportNumber == utilizationSearchRequest.inventionReportNumber
                && this.inventionDocketNumber == utilizationSearchRequest.inventionDocketNumber
                && this.grantContractNumber == utilizationSearchRequest.grantContractNumber
                && this.latestStageDev == utilizationSearchRequest.latestStageDev
                && this.primaryAgency == utilizationSearchRequest.primaryAgency
                && this.granteeOrganizationName == utilizationSearchRequest.granteeOrganizationName
                && this.titleElectionStatus == utilizationSearchRequest.titleElectionStatus
                && this.inventionTitle == utilizationSearchRequest.inventionTitle
                && this.inventionReportDateFrom == utilizationSearchRequest.inventionReportDateFrom
                && this.inventionReportDateTo == utilizationSearchRequest.inventionReportDateTo
                && this.fiscalYear == utilizationSearchRequest.fiscalYear
                && this.commercialProductName == utilizationSearchRequest.commercialProductName
                && this.fdaApprovalNumber == utilizationSearchRequest.fdaApprovalNumber
                && this.fdaReportType == utilizationSearchRequest.fdaReportType
                && this.lastUpdatedFrom == utilizationSearchRequest.lastUpdatedFrom
                && this.lastUpdatedTo == utilizationSearchRequest.lastUpdatedTo;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (r_limit == null ? 0 : System.hashCode(r_limit));
        hashCode = (17 * hashCode) + (offset == null ? 0 : System.hashCode(offset));
        hashCode = (17 * hashCode) + (inventionReportNumber == null ? 0 : System.hashCode(inventionReportNumber));
        hashCode = (17 * hashCode) + (inventionDocketNumber == null ? 0 : System.hashCode(inventionDocketNumber));
        hashCode = (17 * hashCode) + (grantContractNumber == null ? 0 : System.hashCode(grantContractNumber));
        hashCode = (17 * hashCode) + (latestStageDev == null ? 0 : System.hashCode(latestStageDev));
        hashCode = (17 * hashCode) + (primaryAgency == null ? 0 : System.hashCode(primaryAgency));
        hashCode = (17 * hashCode) + (granteeOrganizationName == null ? 0 : System.hashCode(granteeOrganizationName));
        hashCode = (17 * hashCode) + (titleElectionStatus == null ? 0 : System.hashCode(titleElectionStatus));
        hashCode = (17 * hashCode) + (inventionTitle == null ? 0 : System.hashCode(inventionTitle));
        hashCode = (17 * hashCode) + (inventionReportDateFrom == null ? 0 : System.hashCode(inventionReportDateFrom));
        hashCode = (17 * hashCode) + (inventionReportDateTo == null ? 0 : System.hashCode(inventionReportDateTo));
        hashCode = (17 * hashCode) + (fiscalYear == null ? 0 : System.hashCode(fiscalYear));
        hashCode = (17 * hashCode) + (commercialProductName == null ? 0 : System.hashCode(commercialProductName));
        hashCode = (17 * hashCode) + (fdaApprovalNumber == null ? 0 : System.hashCode(fdaApprovalNumber));
        hashCode = (17 * hashCode) + (fdaReportType == null ? 0 : System.hashCode(fdaReportType));
        hashCode = (17 * hashCode) + (lastUpdatedFrom == null ? 0 : System.hashCode(lastUpdatedFrom));
        hashCode = (17 * hashCode) + (lastUpdatedTo == null ? 0 : System.hashCode(lastUpdatedTo));
        return hashCode;
    }
}