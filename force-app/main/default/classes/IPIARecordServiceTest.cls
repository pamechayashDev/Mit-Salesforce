/**
 * Created by Andreas du Preez on 2024/07/30.
 */

@IsTest
public with sharing class IPIARecordServiceTest {
     
    @TestSetup
    public static void testSetup() {
         TestSetup.defaultConfiguration();
    }


    // Test scenario where IPIA Types exist and IPIA Records are inserted
    @IsTest
    public static void StressTestIPIARecordInsert() {
        String IPIA_TYPE_NAME_1 = 'IPIA_TYPE_1';
        String IPIA_TYPE_TEMPLATE_ID_1 = 'a503d2b9-b29e-4b84-8b2a-6436bae3693a';
        String IPIA_TYPE_NAME_2 = 'IPIA_TYPE_2';
        String IPIA_TYPE_TEMPLATE_ID_2 = 'cfee5c68-33d1-475d-84aa-e3daf9c17884';
        String IPIA_TYPE_NAME_3 = 'IPIA_TYPE_3';
        String IPIA_TYPE_TEMPLATE_ID_3 = '48e3c89e-50d1-4265-85b7-24109d978953';
        String IPIA_TYPE_NAME_4 = 'IPIA_TYPE_4';
        String IPIA_TYPE_TEMPLATE_ID_4 = '7768ced8-9441-4f6a-bc75-6d32cf4244a1';
        Integer IPIA_LINKED_TO_TYPE_1 = 100;
        Integer IPIA_LINKED_TO_TYPE_2 = 100;
        Integer IPIA_LINKED_TO_TYPE_3 = 100;

        IPIA_Type__c type1 = new IPIA_Type__c(Name = IPIA_TYPE_NAME_1, Status__c = 'Active', DocusignTemplate__c = IPIA_TYPE_TEMPLATE_ID_1);
        IPIA_Type__c type2 = new IPIA_Type__c(Name = IPIA_TYPE_NAME_2, Status__c = 'Active', DocusignTemplate__c = IPIA_TYPE_TEMPLATE_ID_2);
        IPIA_Type__c type3 = new IPIA_Type__c(Name = IPIA_TYPE_NAME_3, Status__c = 'Active');
        IPIA_Type__c type4 = new IPIA_Type__c(Name = IPIA_TYPE_NAME_4, Status__c = 'Active', DocusignTemplate__c = IPIA_TYPE_TEMPLATE_ID_4);
        List<IPIA_Type__c> types = new List<IPIA_Type__c>{
                type1, type2, type3, type4
        };
        insert types;

        List<IPIA_Record__c> ipiaRecordsToInsert = new List<IPIA_Record__c>();

        Integer startingMitId = 912123654 - 400;
        for (Integer i = 1; i <= IPIA_LINKED_TO_TYPE_1; i++) {
            IPIA_Record__c ipiaRecord = new IPIA_Record__c(MitId__c = (startingMitId + i).toString());
            ipiaRecord.FormName__c = IPIA_TYPE_NAME_1;
            ipiaRecord.SignDatetime__c = Date.today().addDays(-30);
            ipiaRecordsToInsert.add(ipiaRecord);
        }

        for (Integer i = 1; i <= IPIA_LINKED_TO_TYPE_2; i++) {
            IPIA_Record__c ipiaRecord = new IPIA_Record__c(MitId__c = (startingMitId + i).toString());
            ipiaRecord.FormName__c = IPIA_TYPE_NAME_2;
            ipiaRecord.DocusignTemplate__c = IPIA_TYPE_TEMPLATE_ID_2;
            ipiaRecord.SignDatetime__c = Date.today().addDays(-30);
            ipiaRecordsToInsert.add(ipiaRecord);
        }

        for (Integer i = 1; i <= IPIA_LINKED_TO_TYPE_3; i++) {
            IPIA_Record__c ipiaRecord = new IPIA_Record__c(MitId__c = (startingMitId + i).toString());
            ipiaRecord.FormName__c = IPIA_TYPE_NAME_3;
            ipiaRecord.SignDatetime__c = Date.today().addDays(-30);
            ipiaRecordsToInsert.add(ipiaRecord);
        }

        for (Integer i = 1; i <= 100; i++) {
            IPIA_Record__c ipiaRecord = new IPIA_Record__c(MitId__c = (startingMitId + i).toString());
            ipiaRecord.FormName__c = 'Does not exist';
            ipiaRecord.DocusignTemplate__c = 'Does not exist';
            ipiaRecord.SignDatetime__c = Date.today().addDays(-30);
            ipiaRecordsToInsert.add(ipiaRecord);
        }

        Test.startTest();
        insert ipiaRecordsToInsert;
        Test.stopTest();

        Integer counterLinkToCreateFrom1 = [SELECT COUNT() FROM IPIA_Record__c WHERE IPIA_Type__c = :type1.Id];
        Integer counterLinkToCreateFrom2 = [SELECT COUNT() FROM IPIA_Record__c WHERE IPIA_Type__c = :type2.Id];
        Integer counterLinkToCreateFrom3 = [SELECT COUNT() FROM IPIA_Record__c WHERE IPIA_Type__c = :type3.Id];
        Integer counterLinkToCreateFrom4 = [SELECT COUNT() FROM IPIA_Record__c WHERE IPIA_Type__c = :type4.Id];

        // Test IPIATrigger and IPIARecordTriggerHandler
        Assert.areEqual(IPIA_LINKED_TO_TYPE_1, counterLinkToCreateFrom1, 'There should be ' + IPIA_LINKED_TO_TYPE_1 + ' IPIA Records linked to Type 1');
        Assert.areEqual(IPIA_LINKED_TO_TYPE_2, counterLinkToCreateFrom2, 'There should be ' + IPIA_LINKED_TO_TYPE_2 + ' IPIA Records linked to Type 2');
        Assert.areEqual(IPIA_LINKED_TO_TYPE_3, counterLinkToCreateFrom3, 'There should be ' + IPIA_LINKED_TO_TYPE_3 + ' IPIA Records linked to Type 3');
        Assert.areEqual(0, counterLinkToCreateFrom4, 'There should be 0 IPIA Records linked to Type 4');
    }

    // Test scenario where IPIA Records are inserted and IPIA Types are inserted after
    @IsTest
    public static void StressTestIPIATypeInsert() {
        String IPIA_TYPE_NAME_1 = 'IPIA_TYPE_1';
        String IPIA_TYPE_TEMPLATE_ID_1 = 'a503d2b9-b29e-4b84-8b2a-6436bae3693a';
        String IPIA_TYPE_NAME_2 = 'IPIA_TYPE_2';
        String IPIA_TYPE_TEMPLATE_ID_2 = 'cfee5c68-33d1-475d-84aa-e3daf9c17884';
        String IPIA_TYPE_NAME_3 = 'IPIA_TYPE_3';
        String IPIA_TYPE_TEMPLATE_ID_3 = '48e3c89e-50d1-4265-85b7-24109d978953';
        String IPIA_TYPE_NAME_4 = 'IPIA_TYPE_4';
        String IPIA_TYPE_TEMPLATE_ID_4 = '7768ced8-9441-4f6a-bc75-6d32cf4244a1';
        Integer IPIA_LINKED_TO_TYPE_1 = 100;
        Integer IPIA_LINKED_TO_TYPE_2 = 100;
        Integer IPIA_LINKED_TO_TYPE_3 = 100;

        List<IPIA_Record__c> ipiaRecordsToInsert = new List<IPIA_Record__c>();

        Integer startingMitId = 912123654 - 400;
        for (Integer i = 1; i <= IPIA_LINKED_TO_TYPE_1; i++) {
            IPIA_Record__c ipiaRecord = new IPIA_Record__c(MitId__c = (startingMitId + i).toString());
            ipiaRecord.FormName__c = IPIA_TYPE_NAME_1;
            ipiaRecord.SignDatetime__c = Date.today().addDays(-30);
            ipiaRecordsToInsert.add(ipiaRecord);
        }

        for (Integer i = 1; i <= IPIA_LINKED_TO_TYPE_2; i++) {
            IPIA_Record__c ipiaRecord = new IPIA_Record__c(MitId__c = (startingMitId + i).toString());
            ipiaRecord.FormName__c = IPIA_TYPE_NAME_2;
            ipiaRecord.DocusignTemplate__c = IPIA_TYPE_TEMPLATE_ID_2;
            ipiaRecord.SignDatetime__c = Date.today().addDays(-30);
            ipiaRecordsToInsert.add(ipiaRecord);
        }

        for (Integer i = 1; i <= IPIA_LINKED_TO_TYPE_3; i++) {
            IPIA_Record__c ipiaRecord = new IPIA_Record__c(MitId__c = (startingMitId + i).toString());
            ipiaRecord.FormName__c = IPIA_TYPE_NAME_3;
            ipiaRecord.SignDatetime__c = Date.today().addDays(-30);
            ipiaRecordsToInsert.add(ipiaRecord);
        }

        for (Integer i = 1; i <= 100; i++) {
            IPIA_Record__c ipiaRecord = new IPIA_Record__c(MitId__c = (startingMitId + i).toString());
            ipiaRecord.FormName__c = 'Does not exist';
            ipiaRecord.DocusignTemplate__c = 'Does not exist';
            ipiaRecord.SignDatetime__c = Date.today().addDays(-30);
            ipiaRecordsToInsert.add(ipiaRecord);
        }

        insert ipiaRecordsToInsert;

        IPIA_Type__c type1 = new IPIA_Type__c(Name = IPIA_TYPE_NAME_1, Status__c = 'Active', DocusignTemplate__c = IPIA_TYPE_TEMPLATE_ID_1);
        IPIA_Type__c type2 = new IPIA_Type__c(Name = IPIA_TYPE_NAME_2, Status__c = 'Active', DocusignTemplate__c = IPIA_TYPE_TEMPLATE_ID_2);
        IPIA_Type__c type3 = new IPIA_Type__c(Name = IPIA_TYPE_NAME_3, Status__c = 'Active');
        IPIA_Type__c type4 = new IPIA_Type__c(Name = IPIA_TYPE_NAME_4, Status__c = 'Active', DocusignTemplate__c = IPIA_TYPE_TEMPLATE_ID_4);
        List<IPIA_Type__c> types = new List<IPIA_Type__c>{
                type1, type2, type3, type4
        };

        Test.startTest();
        insert types;
        Test.stopTest();

        Integer counterLinkToCreateFrom1 = [SELECT COUNT() FROM IPIA_Record__c WHERE IPIA_Type__c = :type1.Id];
        Integer counterLinkToCreateFrom2 = [SELECT COUNT() FROM IPIA_Record__c WHERE IPIA_Type__c = :type2.Id];
        Integer counterLinkToCreateFrom3 = [SELECT COUNT() FROM IPIA_Record__c WHERE IPIA_Type__c = :type3.Id];
        Integer counterLinkToCreateFrom4 = [SELECT COUNT() FROM IPIA_Record__c WHERE IPIA_Type__c = :type4.Id];

        // Test IPIATrigger and IPIARecordTriggerHandler
        Assert.areEqual(IPIA_LINKED_TO_TYPE_1, counterLinkToCreateFrom1, 'There should be ' + IPIA_LINKED_TO_TYPE_1 + ' IPIA Records linked to Type 1');
        Assert.areEqual(IPIA_LINKED_TO_TYPE_2, counterLinkToCreateFrom2, 'There should be ' + IPIA_LINKED_TO_TYPE_2 + ' IPIA Records linked to Type 2');
        Assert.areEqual(IPIA_LINKED_TO_TYPE_3, counterLinkToCreateFrom3, 'There should be ' + IPIA_LINKED_TO_TYPE_3 + ' IPIA Records linked to Type 3');
        Assert.areEqual(0, counterLinkToCreateFrom4, 'There should be 0 IPIA Records linked to Type 4');
    }

    @IsTest
    public static void updateIPIARecordTypeLink_withTemplateId_FromIPIARecord() {
        IPIA_Record__c record1 = new IPIA_Record__c(FormName__c = 'Type1', DocusignTemplate__c = 'template1', MitId__c = '912345673');
        insert record1;

        IPIA_Type__c type1 = new IPIA_Type__c(Name = 'Type2', Status__c = 'Active', DocusignTemplate__c = 'template1');
        insert type1;

        IPIA_Record__c updatedRecord = [SELECT Id, FormName__c, IPIA_Type__c FROM IPIA_Record__c WHERE Id = :record1.Id];
        Assert.areEqual(type1.Id, updatedRecord.IPIA_Type__c);
        Assert.areEqual('Type2', updatedRecord.FormName__c);
    }

    @IsTest
    public static void updateIPIARecordTypeLink_withFormName_FromIPIARecord() {
        IPIA_Record__c record1 = new IPIA_Record__c(FormName__c = 'Type1', MitId__c = '912345673');
        insert record1;

        IPIA_Type__c type1 = new IPIA_Type__c(Name = 'Type1', Status__c = 'Active');
        insert type1;

        IPIA_Record__c updatedRecord = [SELECT Id, FormName__c, IPIA_Type__c FROM IPIA_Record__c WHERE Id = :record1.Id];
        Assert.areEqual(type1.Id, updatedRecord.IPIA_Type__c);
        Assert.areEqual('Type1', updatedRecord.FormName__c);
    }

    @IsTest
    public static void updateIPIARecordTypeLink_withTemplateId_FromIPIAType() {
        IPIA_Type__c type1 = new IPIA_Type__c(Name = 'Type2', Status__c = 'Active', DocusignTemplate__c = 'template1');
        insert type1;

        IPIA_Record__c record1 = new IPIA_Record__c(FormName__c = 'Type1', DocusignTemplate__c = 'template1', MitId__c = '912345673');
        insert record1;

        IPIA_Record__c updatedRecord = [SELECT Id, FormName__c, IPIA_Type__c FROM IPIA_Record__c WHERE Id = :record1.Id];
        Assert.areEqual(type1.Id, updatedRecord.IPIA_Type__c);
        Assert.areEqual('Type2', updatedRecord.FormName__c);
    }

    @IsTest
    public static void updateIPIARecordTypeLink_withFormName_FromIPIAType() {
        IPIA_Type__c type1 = new IPIA_Type__c(Name = 'Type1', Status__c = 'Active');
        insert type1;

        IPIA_Record__c record1 = new IPIA_Record__c(FormName__c = 'Type1', MitId__c = '912345673');
        insert record1;

        IPIA_Record__c updatedRecord = [SELECT Id, FormName__c, IPIA_Type__c FROM IPIA_Record__c WHERE Id = :record1.Id];
        Assert.areEqual(type1.Id, updatedRecord.IPIA_Type__c);
        Assert.areEqual('Type1', updatedRecord.FormName__c);
    }

    @IsTest
    public static void updateIPIARecordTypeLink_noMatchingTemplateIdButMatchingName() {
        IPIA_Record__c record1 = new IPIA_Record__c(FormName__c = 'Type1', DocusignTemplate__c = 'template2', MitId__c = '912345673');
        insert record1;

        IPIA_Type__c type1 = new IPIA_Type__c(Name = 'Type1', Status__c = 'Active', DocusignTemplate__c = 'template1');
        insert type1;

        IPIA_Record__c updatedRecord = [SELECT Id, IPIA_Type__c FROM IPIA_Record__c WHERE Id = :record1.Id];
        Assert.areEqual(type1.Id, updatedRecord.IPIA_Type__c);
    }

    @IsTest
    public static void updateIPIARecordTypeLink_noMatchingFormName() {
        IPIA_Record__c record1 = new IPIA_Record__c(FormName__c = 'Type2', MitId__c = '912345673');
        insert record1;

        IPIA_Type__c type1 = new IPIA_Type__c(Name = 'Type1', Status__c = 'Active');
        insert type1;

        IPIA_Record__c updatedRecord = [SELECT Id, IPIA_Type__c FROM IPIA_Record__c WHERE Id = :record1.Id];
        Assert.isNull(updatedRecord.IPIA_Type__c);
    }


    @IsTest
    public static void testLinkIPIARecordsToDisclosureInventors() {
        // Constants
        Id recordTypeIdSoftwareCode = Schema.SObjectType.Disclosure__c.getRecordTypeInfosByDeveloperName().get('Software_Code_Disclosure').getRecordTypeId();

        // IPIA Records
        IPIA_Record__c ipiaRecord1 = new IPIA_Record__c(FormName__c = 'Test 1', MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-2));
        IPIA_Record__c ipiaRecord2 = new IPIA_Record__c(FormName__c = 'Test 2', MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-1));
        IPIA_Record__c ipiaRecord3 = new IPIA_Record__c(FormName__c = 'Test 3', MitId__c = '912345675', SignDatetime__c = Date.today());
        List<IPIA_Record__c> ipiaRecords = new List<IPIA_Record__c>{ipiaRecord1, ipiaRecord2, ipiaRecord3};
        insert ipiaRecords;

        // Contacts
        Account contact1 = SampleDataFactory.createContact('Bob', true, '912345671');
        Account contact2 = SampleDataFactory.createContact('Donald', true, '912345675');

        // Disclosure
        Disclosure__c disclosure = SampleDataFactory.createDisclosure(recordTypeIdSoftwareCode, 'Test Inventor Actions on Signing', 'Draft', contact1);

        // Inventors On Disclosure
        DisclosureInventor__c inventor1 = SampleDataFactory.createInventor(disclosure, true, contact1);
        DisclosureInventor__c inventor2 = SampleDataFactory.createInventor(disclosure, true, contact2);

        Test.startTest();
        List<DisclosureInventor__c> disclosureInventors = IPIARecordService.linkIPIARecordsToDisclosureInventors(ipiaRecords);
        Test.stopTest();

        Integer countDisclosureInventors = 0;
        for (DisclosureInventor__c disclosureInventor : disclosureInventors) {
            if (disclosureInventor.Id == inventor1.Id) {
                Assert.areEqual('912345671', disclosureInventor.Contact__r.MitId__pc, 
                    'Disclosure Inventor should be linked to IPIA Record with MitId 912345671');
                Assert.areEqual(ipiaRecord2.Id, disclosureInventor.IPIA_Record__c, 'Disclosure Inventor should be linked to IPIA Record 2');
            }
            else if (disclosureInventor.Id == inventor2.Id) {
                Assert.areEqual('912345675', disclosureInventor.Contact__r.MitId__pc, 
                    'Disclosure Inventor should be linked to IPIA Record with MitId 912345675');
                Assert.areEqual(ipiaRecord3.Id, disclosureInventor.IPIA_Record__c, 'Disclosure Inventor should be linked to IPIA Record 3');
            }
            countDisclosureInventors++;
        }
        Assert.areEqual(2, countDisclosureInventors, 'Should have linked 2 Disclosure Inventors to IPIA Records');
    }

    @IsTest
    public static void testLinkIPIARecordsToDisclosureInventorsAfterCreation() {
        // Constants
        Id recordTypeIdSoftwareCode = Schema.SObjectType.Disclosure__c.getRecordTypeInfosByDeveloperName().get('Software_Code_Disclosure').getRecordTypeId();

        // IPIA Records
        IPIA_Record__c ipiaRecord1 = new IPIA_Record__c(FormName__c = 'Test 1', MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-2));
        IPIA_Record__c ipiaRecord2 = new IPIA_Record__c(FormName__c = 'Test 2', MitId__c = '912345675', SignDatetime__c = Date.today().addDays(-2));
        List<IPIA_Record__c> ipiaRecords = new List<IPIA_Record__c>{ipiaRecord1, ipiaRecord2};
        insert ipiaRecords;

        // Contacts
        Account contact1 = SampleDataFactory.createContact('Bob', true, '912345671');
        Account contact2 = SampleDataFactory.createContact('Donald', true, '912345675');

        // Disclosure
        Disclosure__c disclosure = SampleDataFactory.createDisclosure(recordTypeIdSoftwareCode, 'Test Inventor Actions on Signing', 'Draft', contact1);

        // Inventors On Disclosure
        DisclosureInventor__c inventor1 = SampleDataFactory.createInventor(disclosure, true, contact1);
        DisclosureInventor__c inventor2 = SampleDataFactory.createInventor(disclosure, true, contact2);

        inventor1 = [SELECT Id, IPIA_Record__c, IPIA_Record__r.SignDatetime__c FROM DisclosureInventor__c WHERE Contact__r.FirstName = 'Bob' LIMIT 1];
        inventor2 = [SELECT Id, IPIA_Record__c, IPIA_Record__r.SignDatetime__c FROM DisclosureInventor__c WHERE Contact__r.FirstName = 'Donald' LIMIT 1];

        Assert.areEqual(inventor1.IPIA_Record__r.SignDatetime__c, ipiaRecord1.SignDatetime__c, 'Disclosure Inventor should be linked to IPIA Record 1');
        Assert.areEqual(inventor2.IPIA_Record__r.SignDatetime__c, ipiaRecord2.SignDatetime__c, 'Disclosure Inventor should be linked to IPIA Record 2');

        // Test Disclosure Inventor IPIA did not update since date is before
        IPIA_Record__c ipiaRecord3 = new IPIA_Record__c(FormName__c = 'Test 3', MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-3));
        IPIA_Record__c ipiaRecord4 = new IPIA_Record__c(FormName__c = 'Test 4', MitId__c = '912345675', SignDatetime__c = Date.today().addDays(-3));
        ipiaRecords = new List<IPIA_Record__c>{ipiaRecord3, ipiaRecord4};
        insert ipiaRecords;

        inventor1 = [SELECT Id, IPIA_Record__c, IPIA_Record__r.SignDatetime__c FROM DisclosureInventor__c WHERE Contact__r.FirstName = 'Bob' LIMIT 1];
        inventor2 = [SELECT Id, IPIA_Record__c, IPIA_Record__r.SignDatetime__c FROM DisclosureInventor__c WHERE Contact__r.FirstName = 'Donald' LIMIT 1];

        Assert.areEqual(inventor1.IPIA_Record__r.SignDatetime__c, ipiaRecord1.SignDatetime__c, 'Disclosure Inventor should be linked to IPIA Record 1');
        Assert.areEqual(inventor2.IPIA_Record__r.SignDatetime__c, ipiaRecord2.SignDatetime__c, 'Disclosure Inventor should be linked to IPIA Record 2');

        // Test Disclosure Inventor IPIA did update since date is after
        IPIA_Record__c ipiaRecord5 = new IPIA_Record__c(FormName__c = 'Test 5', MitId__c = '912345671', SignDatetime__c = Date.today());
        IPIA_Record__c ipiaRecord6 = new IPIA_Record__c(FormName__c = 'Test 6', MitId__c = '912345675', SignDatetime__c = Date.today());
        ipiaRecords = new List<IPIA_Record__c>{ipiaRecord5, ipiaRecord6};
        insert ipiaRecords;

        inventor1 = [SELECT Id, IPIA_Record__c, IPIA_Record__r.SignDatetime__c FROM DisclosureInventor__c WHERE Contact__r.FirstName = 'Bob' LIMIT 1];
        inventor2 = [SELECT Id, IPIA_Record__c, IPIA_Record__r.SignDatetime__c FROM DisclosureInventor__c WHERE Contact__r.FirstName = 'Donald' LIMIT 1];

        Assert.areEqual(inventor1.IPIA_Record__r.SignDatetime__c, ipiaRecord5.SignDatetime__c, 'Disclosure Inventor should be linked to IPIA Record 5');
        Assert.areEqual(inventor2.IPIA_Record__r.SignDatetime__c, ipiaRecord6.SignDatetime__c, 'Disclosure Inventor should be linked to IPIA Record 6');
    }

    @IsTest
    public static void testFetchIPIASignedDocument() {
        String signedPdfFileContent = '';

        IPIA_Type__c type1 = new IPIA_Type__c(Name = 'Type1', Exemption__c = false, Status__c = 'Active');
        insert new List<IPIA_Type__c>{type1};
        String envelopeId = 'e00cd216-2997-469e-996e-a19177aa4d47';
        IPIA_Record__c record = new IPIA_Record__c(IPIA_Type__c = type1.Id, FormName__c = 'Type1', MitId__c = '912345673', DocusignEnvelopeId__c = envelopeId);
        insert record;

        HttpMockBlobFactory mock = new HttpMockBlobFactory(201, 'OK', signedPdfFileContent, new Map<String,String>());
        Id fakeId = TestUtility.getFakeId(IPIA_Type__c.sObjectType);
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, mock);

        IPIARecordService service = new IPIARecordService();
        Blob pdf = service.getIpiaRecordDocument(record.Id);
        System.assertEquals(true, pdf != null, 'Expected base64 downloaded and converted to Blob');

        Blob emptyPdf = service.getIpiaRecordDocument(fakeId);
        System.assertEquals(true, emptyPdf == null, 'Expected null Blob');
        Test.stopTest();
    }


    @IsTest
    public static void testFailedFetchIPIASignedDocument() {
        String signedPdfFileContent = '{"message": "The envelope specified either does not exist or you have no rights to it."}';

        IPIA_Type__c type1 = new IPIA_Type__c(Name = 'Type1', Exemption__c = false, Status__c = 'Active');
        insert new List<IPIA_Type__c>{type1};
        String envelopeId = 'e00cd216-2997-469e-996e-a19177aa4d47';
        IPIA_Record__c record = new IPIA_Record__c(IPIA_Type__c = type1.Id, FormName__c = 'Type1', MitId__c = '912345673', DocusignEnvelopeId__c = envelopeId);
        insert record;

        HttpMockBlobFactory mock = new HttpMockBlobFactory(400, 'OK', signedPdfFileContent, new Map<String,String>());
        Id fakeId = TestUtility.getFakeId(IPIA_Type__c.sObjectType);
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, mock);

        try {
            IPIARecordService service = new IPIARecordService();
            Blob pdf = service.getIpiaRecordDocument(record.Id);
            System.assert(false, 'Exception not thrown');
        }catch(Exception e) {
        }
        Test.stopTest();
    }

    @IsTest
    public static void testEmptyFetchIPIASignedDocument() {
        String signedPdfFileContent = '';

        IPIA_Type__c type1 = new IPIA_Type__c(Name = 'Type1', Exemption__c = false, Status__c = 'Active');
        insert new List<IPIA_Type__c>{type1};
        String envelopeId = 'e00cd216-2997-469e-996e-a19177aa4d47';
        IPIA_Record__c record = new IPIA_Record__c(IPIA_Type__c = type1.Id, FormName__c = 'Type1', MitId__c = '912345673', DocusignEnvelopeId__c = envelopeId);
        insert record;

        HttpMockBlobFactory mock = new HttpMockBlobFactory(201, 'OK', signedPdfFileContent, new Map<String,String>());
        Id fakeId = TestUtility.getFakeId(IPIA_Type__c.sObjectType);
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, mock);

        try {
            IPIARecordService service = new IPIARecordService();
            Blob pdf = service.getIpiaRecordDocument(record.Id);
            System.assert(false, 'Exception not thrown');
        }catch(Exception e) {
        }
        Test.stopTest();
    }

    @IsTest
    public static void returnsCurrentIPIARecordsWithValidMitIds() {
        List<String> mitIds = new List<String>{'912345673', '912123465' };
        IPIA_Record__c record1 = new IPIA_Record__c(MitId__c = '912345673', FormName__c = 'Type1', SignDatetime__c = Date.today().addDays(-1));
        IPIA_Record__c record2 = new IPIA_Record__c(MitId__c = '912123465' , FormName__c = 'Type2', SignDatetime__c = Date.today().addDays(-2));
        insert new List<IPIA_Record__c>{record1, record2};

        Test.startTest();
        List<IPIA_Record__c> result = IPIARecordService.getCurrentIPIARecords(mitIds);
        Test.stopTest();

        System.assertEquals(2, result.size(), 'Should return 2 records');
    }

    @IsTest
    public static void getsCurrentIPIARecordsWithHasDoc() {
        List<String> mitIds = new List<String>{'912345673', '912123465' };
        IPIA_Record__c record1 = new IPIA_Record__c(MitId__c = '912345673', FormName__c = 'Type1', SignDatetime__c = Date.today().addDays(-1));
        IPIA_Record__c record2 = new IPIA_Record__c(MitId__c = '912123465' , FormName__c = 'Type2', SignDatetime__c = Date.today().addDays(-2));
        insert new List<IPIA_Record__c>{record1, record2};

        Test.startTest();
        List<IPIA_Record__c> result = IPIARecordService.getCurrentIPIARecords(mitIds);

        IPIAController.uploadIPIADocuments(result[1].id, 'Test File', 'VGhpcyBpcyBhIHRlc3QgZmlsZSBiYXNlNjQ=', '');
        List<IPIA_Record__c> resultWithDocs = IPIARecordService.getCurrentIPIARecords(mitIds);

        Test.stopTest();

        System.assertEquals(2, result.size(), 'Should return 2 records');
        Assert.areEqual(true , resultWithDocs[0].ContentDocumentLinks.isEmpty(), '1st IPIA record, should NOT have linked doc');
        Assert.areEqual(false, resultWithDocs[1].ContentDocumentLinks.isEmpty(), '2nd IPIA record, should have linked doc');
    }

    @IsTest
    public static void returnsMostRecentIPIARecordForEachMitId() {
        List<String> mitIds = new List<String>{'912345673'};
        IPIA_Record__c oldRecord = new IPIA_Record__c(MitId__c = '912345673', FormName__c = 'Type1', SignDatetime__c = Date.today().addDays(-10));
        IPIA_Record__c newRecord = new IPIA_Record__c(MitId__c = '912345673', FormName__c = 'Type2',SignDatetime__c = Date.today().addDays(-1));
        insert new List<IPIA_Record__c>{oldRecord, newRecord};

        Test.startTest();
        List<IPIA_Record__c> result = IPIARecordService.getCurrentIPIARecords(mitIds);
        Test.stopTest();

        System.assertEquals(1, result.size(), 'Should return 1 record');
        System.assertEquals(newRecord.Id, result[0].Id, 'Should return the most recent record');
    }

    @IsTest
    public static void returnsEmptyListForInvalidMitIds() {
        List<String> mitIds = new List<String>{'invalid_mit_id'};

        Test.startTest();
        List<IPIA_Record__c> result = IPIARecordService.getCurrentIPIARecords(mitIds);
        Test.stopTest();

        System.assertEquals(0, result.size(), 'Should return 0 records');
    }

    @IsTest
    public static void returnsEmptyListForBlankMitIds() {
        List<String> mitIds = new List<String>{''};

        Test.startTest();
        List<IPIA_Record__c> result = IPIARecordService.getCurrentIPIARecords(mitIds);
        Test.stopTest();

        System.assertEquals(0, result.size(), 'Should return 0 records');
    }

    @IsTest
    public static void returnsEmptyListWhenNoRecordsExist() {
        List<String> mitIds = new List<String>{'912345673', '912123465' };

        Test.startTest();
        List<IPIA_Record__c> result = IPIARecordService.getCurrentIPIARecords(mitIds);
        Test.stopTest();

        System.assertEquals(0, result.size(), 'Should return 0 records');
    }

    @IsTest
    public static void testRecordsToSync_insert() {
        // IPIA Records
        IPIA_Record__c ipiaRecord1 = new IPIA_Record__c(FormName__c = 'Test 1', MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-2));
        IPIA_Record__c ipiaRecord2 = new IPIA_Record__c(FormName__c = 'Test 1', MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-3));
        List<IPIA_Record__c> ipiaRecords = new List<IPIA_Record__c>{ipiaRecord1, ipiaRecord2};

        Test.startTest();
        insert ipiaRecords;

        List<IPIA_Record__c> testInsertRecords = IPIARecordService.getIpiaRecordToSync(null, ipiaRecords);
        Assert.areEqual(1, testInsertRecords.size(), 'Should return 1 record');

        IPIA_Record__c updateIpiaRecord1 = new IPIA_Record__c(FormName__c = 'Test 1', MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-1));
        IPIA_Record__c updateIpiaRecord2 = new IPIA_Record__c(FormName__c = 'Test 1', MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-5));
        List<IPIA_Record__c> updateIpiaRecords = new List<IPIA_Record__c>{updateIpiaRecord1, updateIpiaRecord2};
        insert updateIpiaRecords;
        List<IPIA_Record__c> testUpdateRecords = IPIARecordService.getIpiaRecordToSync(ipiaRecords, updateIpiaRecords);

        Assert.areEqual(1, testUpdateRecords.size(), 'Should return 1 record');
        IPIARecordService.startForresterSync(testUpdateRecords);

        Test.stopTest();
    }

    @IsTest
    public static void testRecordsToSync_update() {
        // Only IPIA Sys Admin can update IPIA Records' MIT ID and historic IPIASs
        insert new PermissionSetAssignment(AssigneeId=UserInfo.getUserId(),
                PermissionSetId=[SELECT Id FROM PermissionSet WHERE Name='IPIA_TLO_Admin'].Id);

        System.runAs(new User(Id = UserInfo.getUserId())) {
            IPIA_Type__c ipiaType1 = new IPIA_Type__c(Name = 'Test 1', Exemption__c = true, Status__c = 'Active');
            IPIA_Type__c ipiaType2 = new IPIA_Type__c(Name = 'Test 2', Exemption__c = true, Status__c = 'Active');
            insert new List<IPIA_Type__c>{
                    ipiaType1, ipiaType2
            };

            // IPIA Records
            IPIA_Record__c ipiaRecord1 = new IPIA_Record__c(IPIA_Type__c = ipiaType1.Id, MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-2));
            IPIA_Record__c ipiaRecord2 = new IPIA_Record__c(IPIA_Type__c = ipiaType2.Id, MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-3));
            List<IPIA_Record__c> ipiaRecords = new List<IPIA_Record__c>{
                    ipiaRecord1, ipiaRecord2
            };

            Test.startTest();
            insert ipiaRecords;

            List<IPIA_Record__c> testInsertRecords = IPIARecordService.getIpiaRecordToSync(null, ipiaRecords);
            Assert.areEqual(1, testInsertRecords.size(), 'Should return 1 record');


            // Update the Current IPIA, should sync
            IPIA_Record__c updatedIpiaRecord1 = new IPIA_Record__c(Id = ipiaRecord1.Id, IPIA_Type__c = ipiaType2.Id, MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-2));
            update updatedIpiaRecord1;

            List<IPIA_Record__c> testUpdateRecords = IPIARecordService.getIpiaRecordToSync(new List<IPIA_Record__c>{
                    ipiaRecord1
            }, new List<IPIA_Record__c>{
                    updatedIpiaRecord1
            });
            Assert.areEqual(1, testUpdateRecords.size(), 'Should return 1 record');
            Assert.areEqual(ipiaRecord1.Id, testUpdateRecords[0].Id, 'Should return the Current IPIA record after IPIA Type was changed');


            // Update a historic IPIA to become the new Current IPIA, should sync
            IPIA_Record__c updatedIpiaRecord2 = new IPIA_Record__c(Id = ipiaRecord2.Id, MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-1));
            update updatedIpiaRecord2;

            List<IPIA_Record__c> testUpdateRecords2 = IPIARecordService.getIpiaRecordToSync(new List<IPIA_Record__c>{
                    ipiaRecord2
            }, new List<IPIA_Record__c>{
                    updatedIpiaRecord2
            });
            Assert.areEqual(1, testUpdateRecords2.size(), 'Should return 1 record');
            Assert.areEqual(ipiaRecord2.Id, testUpdateRecords2[0].Id, 'Should return the Current IPIA record');


            // Should not sync any record since it is a historic IPIA
            updatedIpiaRecord1.IPIA_Type__c = ipiaType1.Id;
            update updatedIpiaRecord1;

            List<IPIA_Record__c> testUpdateRecords3 = IPIARecordService.getIpiaRecordToSync(new List<IPIA_Record__c>{
                    ipiaRecord1
            }, new List<IPIA_Record__c>{
                    updatedIpiaRecord1
            });
            Assert.areEqual(0, testUpdateRecords3.size(), 'Should not return any record since it is not the Current IPIA');

            IPIARecordService.startForresterSync(testUpdateRecords);

            Test.stopTest();
        }
    }

    @IsTest
    public static void testRecordsShouldNotSync() {
        // IPIA Records
        IPIA_Record__c ipiaRecord1 = new IPIA_Record__c(FormName__c = 'Test 1', MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-1));
        IPIA_Record__c ipiaRecord2 = new IPIA_Record__c(FormName__c = 'Test 1', MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-2));
        List<IPIA_Record__c> ipiaRecords = new List<IPIA_Record__c>{ipiaRecord1, ipiaRecord2};

        Test.startTest();
        insert ipiaRecords;

        List<IPIA_Record__c> testInsertRecords = IPIARecordService.getIpiaRecordToSync(null, ipiaRecords);
        Assert.areEqual(1, testInsertRecords.size(), 'Should return 1 record');

        IPIA_Record__c updateIpiaRecord1 = new IPIA_Record__c(FormName__c = 'Test 1', MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-3));
        IPIA_Record__c updateIpiaRecord2 = new IPIA_Record__c(FormName__c = 'Test 1', MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-4));
        List<IPIA_Record__c> updateIpiaRecords = new List<IPIA_Record__c>{updateIpiaRecord1, updateIpiaRecord2};
        insert updateIpiaRecords;
        List<IPIA_Record__c> testUpdateRecords = IPIARecordService.getIpiaRecordToSync(ipiaRecords, updateIpiaRecords);

        Assert.areEqual(0, testUpdateRecords.size(), 'Should return 0 record');
        IPIARecordService.startForresterSync(testUpdateRecords);

        Test.stopTest();
    }

    @IsTest
    public static void testDuplicateMitIdSyncToForrester() {
        // IPIA Records
        IPIA_Record__c ipiaRecord1 = new IPIA_Record__c(FormName__c = 'Test 1', MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-2));
        List<IPIA_Record__c> ipiaRecords = new List<IPIA_Record__c>{ipiaRecord1 };


        insert ipiaRecords;
        List<IPIA_Record__c> testInsertRecords = IPIARecordService.getIpiaRecordToSync(null, ipiaRecords);



        // Create mock database instance for external data
        ExternalQueryMock mock = ExternalQueryMock.getInstance();

        // Mock Forrester Contact data
        List<Forrester_CONTACT__x> mockForresterContacts = new List<Forrester_CONTACT__x>();
        Forrester_CONTACT__x mockForresterContact = new Forrester_CONTACT__x(
            MIT_ID__c = '91234567',
            CONTACT_RECID__c = '12345'
        );
        Forrester_CONTACT__x mockDuplicateForresterContact = new Forrester_CONTACT__x(
            MIT_ID__c = '91234567',
            CONTACT_RECID__c = '12346'
        );
        mockForresterContacts.add(mockForresterContact);
        mockForresterContacts.add(mockDuplicateForresterContact);

        mock.setDataStore('Forrester_CONTACT__x:Ids', mockForresterContacts);
        Boolean exceptionThrown = false;
        try{
            Test.startTest();
            Set<Id> asyncRequestIdsList = IPIARecordService.startForresterSync(ipiaRecords);
            IPIARecordUpsertJob upsertIpiaJob = new IPIARecordUpsertJob(asyncRequestIdsList);
            Integer delayInMinutes = 0;
            System.enqueueJob(upsertIpiaJob, delayInMinutes);

            Test.stopTest();
        }catch (Exception e) {
            exceptionThrown = true;
        }
        Assert.isTrue(!exceptionThrown, 'Duplicate Forrester MIT_ID Exception should be handled');

    }

    @IsTest
    public static void testMitIdNotFoundSyncToForrester() {

        // IPIA Records
        IPIA_Record__c ipiaRecord1 = new IPIA_Record__c(FormName__c = 'Test 1', MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-2));
        List<IPIA_Record__c> ipiaRecords = new List<IPIA_Record__c>{ipiaRecord1 };


        insert ipiaRecords;
        List<IPIA_Record__c> testInsertRecords = IPIARecordService.getIpiaRecordToSync(null, ipiaRecords);


        // Create mock database instance for external data
        ExternalQueryMock mock = ExternalQueryMock.getInstance();

        // Mock Forrester Contact data
        List<Forrester_CONTACT__x> mockForresterContacts = new List<Forrester_CONTACT__x>();
        // Empty List
        mock.setDataStore('Forrester_CONTACT__x:Ids', mockForresterContacts);
        Boolean exceptionThrown = false;
        try{
            Test.startTest();
            Set<Id> asyncRequestIdsList = IPIARecordService.startForresterSync(ipiaRecords);
            IPIARecordUpsertJob upsertIpiaJob = new IPIARecordUpsertJob(asyncRequestIdsList);
            Integer delayInMinutes = 0;
            System.enqueueJob(upsertIpiaJob, delayInMinutes);

            Test.stopTest();
        }catch (Exception e) {
            exceptionThrown = true;
        }
        Assert.isTrue(!exceptionThrown, 'MIT_ID not found Exception should be handled');

    }

    @IsTest
    public static void testSyncToForresterBatch() {

        // IPIA Records
        IPIA_Record__c ipiaRecord1 = new IPIA_Record__c(FormName__c = 'Test 1', MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-2));
        List<IPIA_Record__c> ipiaRecords = new List<IPIA_Record__c>{ipiaRecord1 };


        insert ipiaRecords;
        Async_Request__c asyncReq = getAsyncRequestByRecordId(ipiaRecord1.Id);
        System.assert(asyncReq.Has_Processed__c == false, 'Initial value should be false');
        System.assert(asyncReq.Retry_Count__c == 0, 'Initial value should be 0');

        List<IPIA_Record__c> testInsertRecords = IPIARecordService.getIpiaRecordToSync(null, ipiaRecords);


        // Create mock database instance for external data
        ExternalQueryMock mock = ExternalQueryMock.getInstance();

        // Mock Forrester Contact data
        List<Forrester_CONTACT__x> mockForresterContacts = new List<Forrester_CONTACT__x>();
        // Empty List
        mock.setDataStore('Forrester_CONTACT__x:Ids', mockForresterContacts);
        Boolean exceptionThrown = false;
        try{
            Test.startTest();
            IPIASignedToForresterJob ipiaJob = new IPIASignedToForresterJob();
            Database.executeBatch(ipiaJob, 50);
            Test.stopTest();
        }catch (Exception e) {
            exceptionThrown = true;
        }
        Assert.isTrue(!exceptionThrown, 'MIT_ID not found Exception should be handled');

        Async_Request__c asyncReqAfter = getAsyncRequestByRecordId(ipiaRecord1.Id);
        System.assert(asyncReqAfter.Has_Processed__c == false, 'Processed value should be false');
        System.assert(asyncReqAfter.Retry_Count__c == 1, 'Retry count should 1');

    }


    @IsTest
    public static void testSyncToForrester() {

        // IPIA Types
        // ALTERNATE IPIA AGMT FLAG is true when Exemption is true
        IPIA_Type__c ipiaType1 = new IPIA_Type__c(Name = 'Other', Exemption__c = true, Status__c = 'Active');
        insert ipiaType1;
        // IPIA Records
        IPIA_Record__c ipiaRecord1 = new IPIA_Record__c(FormName__c = ipiaType1.Name, MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-2), IPIA_Type__c = ipiaType1.Id);
        IPIA_Record__c ipiaRecord2 = new IPIA_Record__c(FormName__c = 'Test 2', MitId__c = '912345691', SignDatetime__c = Date.today().addDays(-1));
        List<IPIA_Record__c> ipiaRecords = new List<IPIA_Record__c>{ipiaRecord1, ipiaRecord2};



        insert ipiaRecords;
        List<IPIA_Record__c> testInsertRecords = IPIARecordService.getIpiaRecordToSync(null, ipiaRecords);



        // Create mock database instance for external data
        ExternalQueryMock mock = ExternalQueryMock.getInstance();

        // Mock Forrester Contact data
        List<Forrester_CONTACT__x> mockForresterContacts = new List<Forrester_CONTACT__x>();
        Forrester_CONTACT__x mockForresterContact = new Forrester_CONTACT__x(
            MIT_ID__c = '912345671',
            CONTACT_RECID__c = '12345',
            Id = TestUtility.getFakeId(Forrester_CONTACT__x.sObjectType)
        );
        mockForresterContacts.add(mockForresterContact);
        Forrester_CONTACT__x mockForresterContact2 = new Forrester_CONTACT__x(
            MIT_ID__c = '912345691',
            CONTACT_RECID__c = '12346',
            Id = TestUtility.getFakeId(Forrester_CONTACT__x.sObjectType)
        );
        mockForresterContacts.add(mockForresterContact2);

        // Mock Forrester IPIA Types data
        List<Forrester_IPIA_TYPES__x> mockForresterIPIATypes = new List<Forrester_IPIA_TYPES__x>();
        Forrester_IPIA_TYPES__x mockForresterIPIAType = new Forrester_IPIA_TYPES__x(
            IPIA_TYPE__c = 'SMART',
            Id = TestUtility.getFakeId(Forrester_IPIA_TYPES__x.sObjectType)
        );
        mockForresterIPIATypes.add(mockForresterIPIAType);

        mock.setDataStore('Forrester_CONTACT__x:Ids', mockForresterContacts);
        mock.setDataStore('Forrester_IPIA_TYPES__x:Ids', mockForresterIPIATypes);
        ExternalObjectDatabase.setMock(new MockExternalObjectDatabase(mockForresterContact.Id));

        Set<Id> asyncRequestIdsList = IPIARecordService.startForresterSync(ipiaRecords);

        Test.startTest();
        IPIARecordUpsertJob upsertIpiaJob = new IPIARecordUpsertJob(asyncRequestIdsList);
        Integer delayInMinutes = 0;
        System.enqueueJob(upsertIpiaJob, delayInMinutes);
        Test.stopTest();

        Id asyncReqId = new List<Id> (asyncRequestIdsList).get(0);
        Async_Request__c asyncReq = getAsyncRequestById(asyncReqId);
        System.assert(asyncReq.Has_Processed__c, 'Has_Processed__c should be true');

        IPIA_Record__c ipiaRecord1Test = [SELECT Id, MitId__c, Contact_Recid__c FROM IPIA_Record__c WHERE MitId__c = :ipiaRecord1.MitId__c];
        System.assertEquals(ipiaRecord1Test.Contact_Recid__c, mockForresterContact.CONTACT_RECID__c, 'The Contact RecId should be updated from Forrester');


    }
    @IsTest
    public static void testCommentSyncToForrester() {
         IPIARecordUpsertJob job = new IPIARecordUpsertJob(new Set<Id>());
         Integer maxLength = 109;
         String ipiaTypeName = 'IBM';
         String comment1 = 'Duplicate Contact ID #44000 had an existing IPIA:';
         comment1 += '\nSigned IPIA: checked';
         comment1 += '\nDate IPIA Signed: 6/3/1995';
         comment1 += '\nSigned: IBM';
         String newComment = job.getIPIATypeComment(maxLength, comment1, 'Other',  DateTime.newInstance(2024, 3, 31 ).date());
         System.debug(newComment);
         System.assert(newComment.length() <= maxLength, 'Comment not truncated');
         System.assert(newComment.startsWith('...'), 'Comment not truncated');

         String nullComment = job.getIPIATypeComment(maxLength, null, 'Other',  DateTime.newInstance(2024, 3, 31 ).date());
         System.assertEquals(nullComment, 'Signed: Other Date: 03/31/2024', 'IPIA comment does not match');

         String emptyComment = job.getIPIATypeComment(maxLength, '', 'Other',  DateTime.newInstance(2024, 3, 31 ).date());
         System.assertEquals(emptyComment, 'Signed: Other Date: 03/31/2024', 'IPIA comment does not match');

         String emptyDateComment = job.getIPIATypeComment(maxLength, '', 'Other',  null);
         System.assertEquals(emptyDateComment, 'Signed: Other', 'IPIA comment does not match');


         String truncationNotNeededComment = job.getIPIATypeComment(maxLength, 'IPIA received from LL on 12/15/2022.', 'Other',  DateTime.newInstance(2024, 3, 31 ).date());
         System.assertEquals(truncationNotNeededComment, 'IPIA received from LL on 12/15/2022.\nSigned: Other Date: 03/31/2024', 'Original comment does not match');
    }

    @IsTest
    public static void testFormTypeChangedExempted() {

        IPIA_Type__c ipiaType1 = new IPIA_Type__c(Name = 'Other', Exemption__c = true, Status__c = 'Active');
        insert ipiaType1;
        IPIA_Record__c ipiaRecord1 = new IPIA_Record__c(FormName__c = ipiaType1.Name, MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-2), IPIA_Type__c = ipiaType1.Id);
        List<IPIA_Record__c> ipiaRecords = new List<IPIA_Record__c>{ipiaRecord1};

        insert ipiaRecords;

        Map<Id, IPIA_Type__c> typeLookup = IPIARecordService.getIpiaTypesFromIpiaRecord(ipiaRecords);
        Boolean formExempted = IPIARecordService.ipiaRecordTypeChangedAndExempt(ipiaRecord1, typeLookup);
        System.assertEquals(true, formExempted, 'Exemption flag is true');
    }

   @IsTest
    public static void testFormTypeChangedStandard() {

        IPIA_Type__c ipiaType1 = new IPIA_Type__c(Name = 'Other', Exemption__c = false, Status__c = 'Active');
        insert ipiaType1;
        IPIA_Record__c ipiaRecord1 = new IPIA_Record__c(FormName__c = ipiaType1.Name, MitId__c = '912345671', SignDatetime__c = Date.today().addDays(-2), IPIA_Type__c = ipiaType1.Id);
        List<IPIA_Record__c> ipiaRecords = new List<IPIA_Record__c>{ipiaRecord1};

        insert ipiaRecords;

        Map<Id, IPIA_Type__c> typeLookup = IPIARecordService.getIpiaTypesFromIpiaRecord(ipiaRecords);
        Boolean formExempted = IPIARecordService.ipiaRecordTypeChangedAndExempt(ipiaRecord1, typeLookup);
        System.assertEquals(false, formExempted, 'Exemption flag is false');
    }


    private static Async_Request__c getAsyncRequestById(String id) {
        Async_Request__c asyncReq = [
                            SELECT
                                Id,
                                Has_Processed__c,
                                Retry_Count__c,
                                Record_Id__c,
                                sObject_Name__c
                            FROM Async_Request__c
                            WHERE
                                Id = :id
                                AND sObject_Name__c = 'IPIA_Record__c'
                                AND Job_Name__c = 'IPIASignedToForresterJob'
                            LIMIT 1
                        ];
        return asyncReq;
    }

    private static Async_Request__c getAsyncRequestByRecordId(String id) {
        Async_Request__c asyncReq = [
                            SELECT
                                Id,
                                Has_Processed__c,
                                Retry_Count__c,
                                Record_Id__c,
                                sObject_Name__c
                            FROM Async_Request__c
                            WHERE
                                Record_Id__c = :id
                                AND sObject_Name__c = 'IPIA_Record__c'
                                AND Job_Name__c = 'IPIASignedToForresterJob'
                            LIMIT 1
                        ];
        return asyncReq;
    }


   private class MockExternalObjectDatabase extends ExternalObjectDatabase {
          String scopeId;
          MockExternalObjectDatabase(String scopeId) {
            this.scopeId = scopeId;
          }
          protected override void updatePassThrough(SObject sfObject , DataSource.AsyncSaveCallback asyncSaveCallback, System.AccessLevel accessLevel) {
                Database.SaveResult saveResult = (Database.SaveResult) JSON.deserialize(
                  JSON.serialize(
                      new Map<String, Object>{
                          'id' => this.scopeId,
                          'success' => true,
                          'errors' => new List<String>()
                      }
                  ),
                  Database.SaveResult.class
                );
                asyncSaveCallback.processSave(saveResult);
          }
   }
}