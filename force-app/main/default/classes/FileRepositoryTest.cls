@isTest
public with sharing class FileRepositoryTest {

     @isTest
     public static void kualiDocumentLinkTest() {
        try{
            FileRepository.getCrdrSponsorSRAFilesByCaseRecId('4427');
         } catch(Exception ex) {
            // External Objects will not have a valid Data Source during Codebuild
         }
     }

     @isTest
     public static void crdrFinancialYearTest() {
        String caseCrdrId = '1574340';
        Case_CRDR__c crdr = new Case_CRDR__c();
        crdr.Name = '5783HGQJ';
        crdr.ExternalCaseCRDRId__c = caseCrdrId;
        insert crdr;
        insertFile('CRDR', ContentVersionClassification.Finalised_CRDR, 'N_A', caseCrdrId, '4906435-Flir-12440 LLC-Nestor Franco', crdr.Id) ;
        try{
            String status = null;
            FileRepository.getCrdrFilesByCaseRecId(4427, '2023', status, caseCrdrId);
         } catch(Exception ex) {
            // External Objects will not have a valid Data Source during Codebuild
         }
     }

      @isTest
      public static void sponsorResearchAgreementTest() {
         String caseRecId = '5783';
         TLO_Case__c tloCase = new TLO_Case__c();
         tloCase.Name = '5783HGQJ';
         tloCase.ExternalCaseId__c = caseRecId;
         insert tloCase;

        List<Forrester_Case__x > mockRecords = new List<Forrester_Case__x >();
        Forrester_Case__x mockRecord = new Forrester_Case__x();
        mockRecord.CASE_RECID__c = caseRecId ;
        mockRecords.add(mockRecord);
        ExternalObjectQuery.setMock(new TLOCaseExternalMock(mockRecords));


         insertFile('Sponsor_Agreement', ContentVersionClassification.ORIGINAL_DOCUMENT, ContentVersionEntitySubType.SPONSOR_RESEARCH_AGREEMENT, caseRecId, 'BillGatesSponsor.pdf', tloCase.Id) ;
         insertFile('Other_Agreement', ContentVersionClassification.ORIGINAL_DOCUMENT, ContentVersionEntitySubType.AGREEMENT, caseRecId, 'OtherAgreement.pdf', tloCase.Id) ;
         insertFile('CRDR', ContentVersionClassification.WORKSHEET, ContentVersionEntitySubType.N_A, caseRecId, 'CRDRWorksheet.pdf', tloCase.Id) ;
         try{
             String status = null;
             List<FileRepository.AgreementFileResponse> response = FileRepository.getCaseRelatedFilesByCaseRecId(caseRecId);
             System.assert(response.size() == 3, 'Expecting Three Case Documents');
          } catch(Exception ex) {
             // External Objects will not have a valid Data Source during Codebuild
          }
      }

     @isTest
     public static void crdrAgreementTest() {
        String agreementRecId = '4906435';

        Agreement__c agreement = new Agreement__c();
        agreement.Name = agreementRecId;
        agreement.ExternalAgreement__c = agreementRecId;
        insert agreement;

        insertFile('TLO_Agreement', ContentVersionClassification.ORIGINAL_DOCUMENT, ContentVersionEntitySubType.LICENSE ,agreementRecId, 'FileName1', agreement.Id) ;
        try {
            FileRepository.getCrdrAgreementFilesByCaseRecId(4427, '2023');
         } catch(Exception ex) {
            // External Objects will not have a valid Data Source during Codebuild
         }
     }

    public static void insertFile(String recordType, String subTypeClassification, String entitySubType,String entityRecId, String fileName ,String linkedEntityId){

         Id recordTypeId = Schema.SObjectType.ContentVersion.getRecordTypeInfosByDeveloperName().get(recordType).getRecordTypeId();

         String pdfFileContent = '';

         ContentVersion conVer = new ContentVersion();
         conVer.Title = 'Test ' + fileName; // Display name of the files
         conVer.ContentLocation = 'S'; // to use S specify this document is in Salesforce, to use E for external files
         conVer.PathOnClient = fileName;
         conVer.RecordTypeId = recordTypeId;
         conVer.Document_Classification__c = subTypeClassification;
         conVer.Entity_Sub_Type__c = entitySubType;
         conVer.VersionData = EncodingUtil.base64Decode(pdfFileContent);
         conVer.Entity_RecId__c = entityRecId;
         insert conVer; //Insert ContentVersion

         // First get the Content Document Id from ContentVersion Object
         Id conDoc = [SELECT ContentDocumentId FROM ContentVersion WHERE Id =:conVer.Id].ContentDocumentId;
         //create ContentDocumentLink  record
         ContentDocumentLink conDocLink = new ContentDocumentLink();
         conDocLink.LinkedEntityId = linkedEntityId; // Specify RECORD ID here i.e Any Object ID (Standard Object/Custom Object)
         conDocLink.ContentDocumentId = conDoc;  //ContentDocumentId Id from ContentVersion
         conDocLink.shareType = 'V';
         insert conDocLink;
     }

     @isTest
     public static void entityRecIdTest() {
        String entityRecId = '54320';
        String recordType = 'TLO_Agreement';

        Agreement__c agreement = new Agreement__c();
        agreement.Name = entityRecId;
        agreement.ExternalAgreement__c = entityRecId;
        insert agreement;
        insertFile('TLO_Agreement', ContentVersionClassification.ORIGINAL_DOCUMENT, ContentVersionEntitySubType.LICENSE ,entityRecId, 'FileName1', agreement.Id) ;

        List<ContentDocumentLink> cv = FileRepository.getFileContentVersionsByEntityRecId(entityRecId, recordType, ContentVersionClassification.ORIGINAL_DOCUMENT);
        System.assert(cv.size() == 1, 'Expecting 1 ConventVersion entry');
     }

     public static ContentVersion insertEntityRecIdFile(String type, String subTypeClassification, String fileName, String entityRecId){
        String pathOnClient = filename;
        return insertEntityRecIdFile(type, subTypeClassification, pathOnClient,fileName, entityRecId );
     }

     private class MockExternalObjectQuery extends ExternalObjectQuery {
      protected override List<SObject> passThrough(List<SObject> records) {
          List<SObject> insertedRecords = new List<SObject>();
          for (SObject record : records) {
              record.put('Id', 'mockId_' + String.valueOf(System.currentTimeMillis()));
              insertedRecords.add(record);
          }
          return insertedRecords;
      }
  }

  @IsTest
  static void testExternalObjectQuery() {
      Agreement__c agmt = new  Agreement__c();
      string searchTerm = '5783';
      agmt.Name = searchTerm;
      agmt.ExternalAgreement__c = searchTerm;
      insert agmt;

      List<Forrester_SHIR_AGREEMENT_VIEW__x> mockagrmtRecords = new List<Forrester_SHIR_AGREEMENT_VIEW__x>();
      Forrester_SHIR_AGREEMENT_VIEW__x mockRecord = new Forrester_SHIR_AGREEMENT_VIEW__x();
      mockRecord.AGREEMENT_RECID__c = searchTerm;
      mockRecord.COMPANY_NAME__c = searchTerm;
      mockagrmtRecords.add(mockRecord);

      ExternalObjectQuery.setMock(new MockExternalObjectQuery());

      List<SObject> insertedRecords = ExternalObjectQuery.records(mockagrmtRecords);

          FileRepository.getRelatedFilesByAgreementRecId(insertedRecords[0].Id);
          System.assert(insertedRecords[0].get('AGREEMENT_RECID__c') != null,searchTerm);
       List<ContentDocumentLink> cdlList = FileRepository.getRelatedFilesByAgreementRecId(insertedRecords[0].Id);
       System.assertNotEquals(1, cdlList.size());
  }
     public static ContentVersion insertEntityRecIdFile(String type, String subTypeClassification, String pathOnClient, String fileName, String entityRecId){

         Id recordTypeId = Schema.SObjectType.ContentVersion.getRecordTypeInfosByDeveloperName().get(type).getRecordTypeId();

         String textFilesContent = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit';

         ContentVersion conVer = new ContentVersion();
         conVer.Title = 'Testing Files ' + fileName; // Display name of the files
         conVer.ContentLocation = 'S'; // to use S specify this document is in Salesforce, to use E for external files
         conVer.PathOnClient = pathOnClient;
         conVer.RecordTypeId = recordTypeId;
         conVer.Document_Classification__c = subTypeClassification;
         conVer.Entity_RecId__c = entityRecId;
         conVer.VersionData = Blob.valueOf(textFilesContent);
         insert conVer;    //Insert ContentVersion

         // For now there is no ContentDocument Link.
         return conVer;

     }
}