@IsTest
public class DisclosureDocGenAPITest {
    @TestSetup
    static void makeData() {
        TestSetup.defaultConfiguration();
        ContactSampleDataFactory.createSampleContacts();
        TestSetup.defaultDocTemplatesConfiguration();
    }

    @IsTest
    static void testGetInventorPdfWhenNotSigned() {
        String disclosureTitle = 'testGetInventorPdfWhenNotSigned';
        Disclosure__c disclosure = DisclosureSampleDataFactory.createDraftSoftwareDisclosureFullyPopulated(
            disclosureTitle,
            true
        );

        DisclosureInventor__c inventor = [
            SELECT Id
            FROM DisclosureInventor__c
            WHERE
                Disclosure__c = :disclosure.Id
                AND Contact__r.MitId__pc = '900047497'
            LIMIT 1
        ];

        RestRequest req = new RestRequest();
        RestResponse res = new RestResponse();

        req.requestURI = 'api/disclosure-doc-gen/v1';
        req.httpMethod = 'GET';
        req.params.put('disclosureId', disclosure.Id);
        req.params.put('inventorId', inventor.Id);

        RestContext.request = req;
        RestContext.response = res;

        Test.startTest();
        Test.setMock(
            HttpCalloutMock.class,
            new DocGenApiMock().setRaiseDocuSignException(true)
        );

        String result = DisclosureDocGenAPI.generateDocument();
        Test.stopTest();

        System.assertEquals(
            PdfGeneratorApiMock.body,
            result,
            'Body Should be generated one from API'
        );
    }

    @IsTest
    static void testGetInventorPdfWhenSigned() {
        String disclosureTitle = 'testGetInventorPdfWhenSigned';
        Disclosure__c d = DisclosureSampleDataFactory.createDraftSoftwareDisclosureFullyPopulated(
            disclosureTitle,
            true
        );

        Disclosure__c disclosure = [
            SELECT Id, Name__c
            FROM Disclosure__c
            WHERE Name__c = :disclosureTitle
            LIMIT 1
        ];

        disclosure.Signing_Envelop_Id__c = '123456789';
        update disclosure;

        // Account mitInventor = [SELECT Id FROM Account WHERE  MitId__pc = '900047497'];
        DisclosureInventor__c inventor = [
            SELECT
                Id,
                Contact__r.Id,
                Contact__r.MoiraStatus__pc,
                Contact__r.PersonEmail,
                Contact__r.MitId__pc
            FROM DisclosureInventor__c
            WHERE
                Disclosure__c = :disclosure.Id
                AND Contact__r.MitId__pc = '900047497'
            LIMIT 1
        ];

        inventor.DocuSign_Recipient_StatusCode__c = 'Completed';
        inventor.Inventor_Added_to_DocuSign_Envelope__c = true;
        update inventor;

        String signedPdfFileContent = '';

        Id inventorId = inventor.Id;
        Id cvDisclosureInventorRecordTypeId = Schema.SObjectType.ContentVersion.getRecordTypeInfosByDeveloperName()
            .get('DisclosureInventor')
            .getRecordTypeId();
        ContentVersion cv = new ContentVersion();
        cv.Title = 'DocuSign_' + inventorId + '.pdf'; // Display name of the files
        cv.PathOnClient = 'DocuSign_' + inventorId + '.pdf';
        cv.ContentLocation = 'S'; // to use S specify this document is in Salesforce, to use E for external files
        cv.VersionData = EncodingUtil.base64Decode(signedPdfFileContent);
        cv.Document_Classification__c = 'Signed Disclosure';
        cv.RecordTypeId = cvDisclosureInventorRecordTypeId;

        insert cv; //Insert ContentVersion
        System.debug('ContentVersion inventorDocBlob Created');

        // First get the Content Document Id from ContentVersion Object
        Id conDoc = [
            SELECT ContentDocumentId
            FROM ContentVersion
            WHERE Id = :cv.Id
        ]
        .ContentDocumentId;
        //create ContentDocumentLink  record
        ContentDocumentLink conDocLink = new ContentDocumentLink();
        conDocLink.LinkedEntityId = inventorId; // Specify RECORD ID here i.e Any Object ID (Standard Object/Custom Object)
        conDocLink.ContentDocumentId = conDoc; //ContentDocumentId Id from ContentVersion
        conDocLink.shareType = 'V';
        insert conDocLink;

        RestRequest req = new RestRequest();
        RestResponse res = new RestResponse();

        req.requestURI = 'api/disclosure-doc-gen/v1';
        req.httpMethod = 'GET';
        req.params.put('disclosureId', disclosure.Id);
        req.params.put('inventorId', inventorId);

        RestContext.request = req;
        RestContext.response = res;

        DocuSignApiMock docuSignApiMock = new DocuSignApiMock();
        docuSignApiMock.inventorId = inventor.Id;

        Test.startTest();
        Test.setMock(HttpCalloutMock.class, docuSignApiMock);

        String result = DisclosureDocGenAPI.generateDocument();
        Test.stopTest();

        System.assertEquals(
            signedPdfFileContent,
            result,
            'Body Should be generated one from ContentVersion on SF now'
        );
    }
}